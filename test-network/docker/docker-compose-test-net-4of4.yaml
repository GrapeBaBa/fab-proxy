# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

version: '2'

volumes:
  orderer3.example.com:
#  peer0.org1.example.com:
#  peer0.org2.example.com:

networks:
  test:

services:

  #  orderer0.example.com:
  #    container_name: orderer0.example.com
  #    image: hyperledger/fabric-orderer:2.2
  #    environment:
  #      - ORDERER_GENERAL_PROFILE_ENABLED=false
  #      - ORDERER_GENERAL_PROFILE_ADDRESS=0.0.0.0:6060
  #      - FABRIC_LOGGING_SPEC=error:cauthdsl=fatal
  #      #      - FABRIC_LOGGING_SPEC=info:grpc=info
  #      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
  #      - ORDERER_GENERAL_LISTENPORT=7050
  #      - ORDERER_GENERAL_GENESISMETHOD=file
  #      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
  #      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
  #      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
  #      # enabled TLS
  #      - ORDERER_GENERAL_TLS_ENABLED=true
  #      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
  #      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
  #      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
  #      - ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1
  #      - ORDERER_KAFKA_VERBOSE=false
  #      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
  #      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
  #      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
  #      - ORDERER_GENERAL_AUTHENTICATION_NOEXPIRATIONCHECKS=true
  #      - ORDERER_GENERAL_KEEPALIVE_SERVERMININTERVAL=30s
  #      - ORDERER_GENERAL_CLUSTER_SENDBUFFERSIZE=200
  #    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
  #    command: orderer
  #    volumes:
  #      - ../system-genesis-block/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
  #      - ../organizations/ordererOrganizations/example.com/orderers/orderer0.example.com/msp:/var/hyperledger/orderer/msp
  #      - ../organizations/ordererOrganizations/example.com/orderers/orderer0.example.com/tls/:/var/hyperledger/orderer/tls
  #      - orderer0.example.com:/var/hyperledger/production/orderer
  #    ports:
  #      - 7050:7050
  #    #      - 6060:6060
  #    networks:
  #      - test
  #    extra_hosts:
  #      - "orderer1.example.com:192.168.3.152"
  #      - "orderer2.example.com:192.168.3.152"
  #      - "orderer3.example.com:192.168.3.152"

  #  orderer1.example.com:
  #    container_name: orderer1.example.com
  #    image: hyperledger/fabric-orderer:$IMAGE_TAG
  #    environment:
  #      - ORDERER_GENERAL_PROFILE_ENABLED=false
  #      #      - ORDERER_GENERAL_PROFILE_ADDRESS=0.0.0.0:6060
  #      - FABRIC_LOGGING_SPEC=error:cauthdsl=fatal
  #      #      - FABRIC_LOGGING_SPEC=debug:grpc=info
  #      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
  #      - ORDERER_GENERAL_LISTENPORT=7050
  #      - ORDERER_GENERAL_GENESISMETHOD=file
  #      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
  #      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
  #      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
  #      # enabled TLS
  #      - ORDERER_GENERAL_TLS_ENABLED=true
  #      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
  #      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
  #      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
  #      - ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1
  #      - ORDERER_KAFKA_VERBOSE=false
  #      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
  #      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
  #      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
  #      - ORDERER_GENERAL_AUTHENTICATION_NOEXPIRATIONCHECKS=true
  #      - ORDERER_GENERAL_KEEPALIVE_SERVERMININTERVAL=30s
  #      - ORDERER_GENERAL_CLUSTER_SENDBUFFERSIZE=100
  #    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
  #    command: orderer
  #    volumes:
  #      - ../system-genesis-block/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
  #      - ../organizations/ordererOrganizations/example.com/orderers/orderer1.example.com/msp:/var/hyperledger/orderer/msp
  #      - ../organizations/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/:/var/hyperledger/orderer/tls
  #      - orderer1.example.com:/var/hyperledger/production/orderer
  #    ports:
  #      - 9050:7050
  #    networks:
  #      - test
  #    extra_hosts:
  #      - "orderer0.example.com:192.168.3.152"
  #      - "orderer2.example.com:192.168.3.152"
  #      - "orderer3.example.com:192.168.3.152"

#  orderer2.example.com:
#    container_name: orderer2.example.com
#    image: hyperledger/fabric-orderer:$IMAGE_TAG
#    environment:
#      - ORDERER_GENERAL_PROFILE_ENABLED=false
#      #      - ORDERER_GENERAL_PROFILE_ADDRESS=0.0.0.0:6060
#      - FABRIC_LOGGING_SPEC=error:cauthdsl=fatal
#      #      - FABRIC_LOGGING_SPEC=debug:grpc=info
#      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
#      - ORDERER_GENERAL_LISTENPORT=7050
#      - ORDERER_GENERAL_GENESISMETHOD=file
#      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
#      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
#      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
#      # enabled TLS
#      - ORDERER_GENERAL_TLS_ENABLED=true
#      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
#      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
#      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
#      - ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1
#      - ORDERER_KAFKA_VERBOSE=false
#      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
#      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
#      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
#      - ORDERER_GENERAL_AUTHENTICATION_NOEXPIRATIONCHECKS=true
#      - ORDERER_GENERAL_KEEPALIVE_SERVERMININTERVAL=30s
#      - ORDERER_GENERAL_CLUSTER_SENDBUFFERSIZE=100
#    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
#    command: orderer
#    volumes:
#      - ../system-genesis-block/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
#      - ../organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/msp:/var/hyperledger/orderer/msp
#      - ../organizations/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/:/var/hyperledger/orderer/tls
#      - orderer2.example.com:/var/hyperledger/production/orderer
#    ports:
#      - 11050:7050
#    networks:
#      - test
#    extra_hosts:
#      - "orderer0.example.com:192.168.3.152"
#      - "orderer1.example.com:192.168.3.152"
#      - "orderer3.example.com:192.168.3.152"

    orderer3.example.com:
      container_name: orderer3.example.com
      image: hyperledger/fabric-orderer:$IMAGE_TAG
      environment:
        - ORDERER_GENERAL_PROFILE_ENABLED=false
        #      - ORDERER_GENERAL_PROFILE_ADDRESS=0.0.0.0:6060
        - FABRIC_LOGGING_SPEC=error:cauthdsl=fatal
  #      - FABRIC_LOGGING_SPEC=debug:grpc=info
        - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
        - ORDERER_GENERAL_LISTENPORT=7050
        - ORDERER_GENERAL_GENESISMETHOD=file
        - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
        - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
        - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
        # enabled TLS
        - ORDERER_GENERAL_TLS_ENABLED=true
        - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
        - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
        - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
        - ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1
        - ORDERER_KAFKA_VERBOSE=false
        - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
        - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
        - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
        - ORDERER_GENERAL_AUTHENTICATION_NOEXPIRATIONCHECKS=true
        - ORDERER_GENERAL_KEEPALIVE_SERVERMININTERVAL=30s
        - ORDERER_GENERAL_CLUSTER_SENDBUFFERSIZE=100
      working_dir: /opt/gopath/src/github.com/hyperledger/fabric
      command: orderer
      volumes:
        - ../system-genesis-block/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
        - ../organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/msp:/var/hyperledger/orderer/msp
        - ../organizations/ordererOrganizations/example.com/orderers/orderer3.example.com/tls/:/var/hyperledger/orderer/tls
        - orderer3.example.com:/var/hyperledger/production/orderer
      ports:
        - 7050:7050
      networks:
        - test
      extra_hosts:
        - "orderer0.example.com:192.168.2.30"
        - "orderer1.example.com:192.168.2.71"
        - "orderer2.example.com:192.168.2.236"

#  peer0.org1.example.com:
#    container_name: peer0.org1.example.com
#    image: hyperledger/fabric-peer:$IMAGE_TAG
#    environment:
#      #Generic peer variables
#      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
#      # the following setting starts chaincode containers on the same
#      # bridge network as the peers
#      # https://docs.docker.com/compose/networking/
#      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
#      - FABRIC_LOGGING_SPEC=error:cauthdsl=fatal
#      #- FABRIC_LOGGING_SPEC=DEBUG
#      - CORE_PEER_TLS_ENABLED=true
#      - CORE_PEER_PROFILE_ENABLED=false
#      - CORE_PEER_PROFILE_LISTENADDRESS=0.0.0.0:6061
#      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
#      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
#      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
#      # Peer specific variabes
#      - CORE_PEER_ID=peer0.org1.example.com
#      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
#      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
#      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052
#      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
#      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
#      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
#      - CORE_PEER_LOCALMSPID=Org1MSP
#      - CORE_PEER_LIMITS_CONCURRENCY_ENDORSERSERVICE=0
#      - CORE_PEER_LIMITS_CONCURRENCY_DELIVERSERVICE=0
#    volumes:
#      - /var/run/docker.sock:/host/var/run/docker.sock
#      - ../organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp
#      - ../organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls
#      - peer0.org1.example.com:/var/hyperledger/production
#    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
#    command: peer node start
#    ports:
#      - 7051:7051
#      - 6061:6061
#    networks:
#      - test

#  peer0.org2.example.com:
#    container_name: peer0.org2.example.com
#    image: hyperledger/fabric-peer:$IMAGE_TAG
#    environment:
#      #Generic peer variables
#      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
#      # the following setting starts chaincode containers on the same
#      # bridge network as the peers
#      # https://docs.docker.com/compose/networking/
#      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
#      - FABRIC_LOGGING_SPEC=error:cauthdsl=fatal
#      #- FABRIC_LOGGING_SPEC=DEBUG
#      - CORE_PEER_TLS_ENABLED=true
#      - CORE_PEER_PROFILE_ENABLED=true
#      - CORE_PEER_PROFILE_LISTENADDRESS=0.0.0.0:6061
#      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
#      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
#      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
#      # Peer specific variabes
#      - CORE_PEER_ID=peer0.org2.example.com
#      - CORE_PEER_ADDRESS=peer0.org2.example.com:9051
#      - CORE_PEER_LISTENADDRESS=0.0.0.0:9051
#      - CORE_PEER_CHAINCODEADDRESS=peer0.org2.example.com:9052
#      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:9052
#      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:9051
#      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:9051
#      - CORE_PEER_LOCALMSPID=Org2MSP
#      - CORE_PEER_LIMITS_CONCURRENCY_ENDORSERSERVICE=0
#      - CORE_PEER_LIMITS_CONCURRENCY_DELIVERSERVICE=0
#    volumes:
#      - /var/run/docker.sock:/host/var/run/docker.sock
#      - ../organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp:/etc/hyperledger/fabric/msp
#      - ../organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls:/etc/hyperledger/fabric/tls
#      - peer0.org2.example.com:/var/hyperledger/production
#    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
#    command: peer node start
#    ports:
#      - 9051:9051
#    networks:
#      - test

#  cli:
#    container_name: cli
#    image: hyperledger/fabric-tools:$IMAGE_TAG
#    tty: true
#    stdin_open: true
#    environment:
#      - GOPATH=/opt/gopath
#      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
#      - FABRIC_LOGGING_SPEC=INFO
#    #      - FABRIC_LOGGING_SPEC=DEBUG
#    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
#    command: /bin/bash
#    volumes:
#      - /var/run/:/host/var/run/
#      - ../organizations:/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations
#      - ../scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
#    depends_on:
#      - peer0.org1.example.com
#      - peer0.org2.example.com
#    networks:
#      - test

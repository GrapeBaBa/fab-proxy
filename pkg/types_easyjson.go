// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package pkg

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeFabProxyPkg(in *jlexer.Lexer, out *TxInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "txid":
			out.TxId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeFabProxyPkg(out *jwriter.Writer, in TxInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"txid\":"
		out.RawString(prefix[1:])
		out.String(string(in.TxId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TxInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeFabProxyPkg(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TxInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeFabProxyPkg(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TxInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeFabProxyPkg(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TxInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeFabProxyPkg(l, v)
}
func easyjson6601e8cdDecodeFabProxyPkg1(in *jlexer.Lexer, out *QueryTokenTx) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contract_id":
			out.ContractId = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "function":
			out.Function = string(in.String())
		case "account":
			out.Account = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeFabProxyPkg1(out *jwriter.Writer, in QueryTokenTx) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contract_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContractId))
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"function\":"
		out.RawString(prefix)
		out.String(string(in.Function))
	}
	{
		const prefix string = ",\"account\":"
		out.RawString(prefix)
		out.String(string(in.Account))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryTokenTx) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeFabProxyPkg1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueryTokenTx) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeFabProxyPkg1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryTokenTx) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeFabProxyPkg1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueryTokenTx) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeFabProxyPkg1(l, v)
}
func easyjson6601e8cdDecodeFabProxyPkg2(in *jlexer.Lexer, out *QueryTokenContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "txcontent":
			(out.TxContent).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeFabProxyPkg2(out *jwriter.Writer, in QueryTokenContent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"txcontent\":"
		out.RawString(prefix[1:])
		(in.TxContent).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryTokenContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeFabProxyPkg2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueryTokenContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeFabProxyPkg2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryTokenContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeFabProxyPkg2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueryTokenContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeFabProxyPkg2(l, v)
}
func easyjson6601e8cdDecodeFabProxyPkg3(in *jlexer.Lexer, out *NodeCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeFabProxyPkg3(out *jwriter.Writer, in NodeCount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NodeCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeFabProxyPkg3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NodeCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeFabProxyPkg3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NodeCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeFabProxyPkg3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NodeCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeFabProxyPkg3(l, v)
}
func easyjson6601e8cdDecodeFabProxyPkg4(in *jlexer.Lexer, out *InvokeTokenTx) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contract_id":
			out.ContractId = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "function":
			out.Function = string(in.String())
		case "source_account":
			out.SourceAccount = string(in.String())
		case "dest_account":
			out.DestAccount = string(in.String())
		case "amount":
			out.Amount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeFabProxyPkg4(out *jwriter.Writer, in InvokeTokenTx) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contract_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContractId))
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"function\":"
		out.RawString(prefix)
		out.String(string(in.Function))
	}
	{
		const prefix string = ",\"source_account\":"
		out.RawString(prefix)
		out.String(string(in.SourceAccount))
	}
	{
		const prefix string = ",\"dest_account\":"
		out.RawString(prefix)
		out.String(string(in.DestAccount))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int(int(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InvokeTokenTx) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeFabProxyPkg4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InvokeTokenTx) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeFabProxyPkg4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InvokeTokenTx) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeFabProxyPkg4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InvokeTokenTx) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeFabProxyPkg4(l, v)
}
func easyjson6601e8cdDecodeFabProxyPkg5(in *jlexer.Lexer, out *InvokeTokenContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "txcontent":
			(out.TxContent).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeFabProxyPkg5(out *jwriter.Writer, in InvokeTokenContent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"txcontent\":"
		out.RawString(prefix[1:])
		(in.TxContent).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InvokeTokenContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeFabProxyPkg5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InvokeTokenContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeFabProxyPkg5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InvokeTokenContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeFabProxyPkg5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InvokeTokenContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeFabProxyPkg5(l, v)
}
func easyjson6601e8cdDecodeFabProxyPkg6(in *jlexer.Lexer, out *ConfirmedTxCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeFabProxyPkg6(out *jwriter.Writer, in ConfirmedTxCount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConfirmedTxCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeFabProxyPkg6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConfirmedTxCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeFabProxyPkg6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConfirmedTxCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeFabProxyPkg6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConfirmedTxCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeFabProxyPkg6(l, v)
}
func easyjson6601e8cdDecodeFabProxyPkg7(in *jlexer.Lexer, out *BlockInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "height":
			out.Height = uint64(in.Uint64())
		case "txcount":
			out.TxCount = int(in.Int())
		case "hash":
			out.Hash = string(in.String())
		case "prehash":
			out.PreHash = string(in.String())
		case "createtime":
			out.CreateTime = string(in.String())
		case "txhashlist":
			if in.IsNull() {
				in.Skip()
				out.TxHashList = nil
			} else {
				in.Delim('[')
				if out.TxHashList == nil {
					if !in.IsDelim(']') {
						out.TxHashList = make([]string, 0, 4)
					} else {
						out.TxHashList = []string{}
					}
				} else {
					out.TxHashList = (out.TxHashList)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.TxHashList = append(out.TxHashList, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeFabProxyPkg7(out *jwriter.Writer, in BlockInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Height))
	}
	{
		const prefix string = ",\"txcount\":"
		out.RawString(prefix)
		out.Int(int(in.TxCount))
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"prehash\":"
		out.RawString(prefix)
		out.String(string(in.PreHash))
	}
	{
		const prefix string = ",\"createtime\":"
		out.RawString(prefix)
		out.String(string(in.CreateTime))
	}
	{
		const prefix string = ",\"txhashlist\":"
		out.RawString(prefix)
		if in.TxHashList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.TxHashList {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlockInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeFabProxyPkg7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlockInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeFabProxyPkg7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlockInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeFabProxyPkg7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlockInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeFabProxyPkg7(l, v)
}
func easyjson6601e8cdDecodeFabProxyPkg8(in *jlexer.Lexer, out *BlockHeight) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "height":
			out.Height = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeFabProxyPkg8(out *jwriter.Writer, in BlockHeight) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Height))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlockHeight) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeFabProxyPkg8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlockHeight) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeFabProxyPkg8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlockHeight) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeFabProxyPkg8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlockHeight) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeFabProxyPkg8(l, v)
}
func easyjson6601e8cdDecodeFabProxyPkg9(in *jlexer.Lexer, out *AcceptedTxCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeFabProxyPkg9(out *jwriter.Writer, in AcceptedTxCount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AcceptedTxCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeFabProxyPkg9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AcceptedTxCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeFabProxyPkg9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AcceptedTxCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeFabProxyPkg9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AcceptedTxCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeFabProxyPkg9(l, v)
}
